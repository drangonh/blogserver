{"version":3,"sources":["utils/oss.js","page/home/UpdateUserInfo.js","axios/index.js","static/image/defualt.jpeg"],"names":["uploadImage","data","file","func","err","type","a","get","res","client","OSS","region","endpoint","accessKeyId","accessKeySecret","bucket","bucketName","PhotoPath","put","result","UpdateUserInfo","inject","observer","props","addImage","input","click","handleImageChange","e","target","files","name","setState","photo","url","upload","person","header","params","avatar","state","email","nickName","description","uid","post","value","changeInfo","history","push","localStorage","setItem","JSON","stringify","login","this","id","className","onClick","style","display","ref","el","accept","onChange","src","length","require","placeholder","v","info","React","Component","Promise","resolve","reject","axios","then","catch","defaults","baseURL","withCredentials","timeout","headers","interceptors","request","use","config","error","response","status","module","exports"],"mappings":"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","file":"static/js/11.f2465966.chunk.js","sourcesContent":["/**\r\n * @author dragonH\r\n * @date 2020/5/23 0023 上午 11:35\r\n */\r\nimport OSS from \"ali-oss\"\r\nimport {get} from \"../axios\";\r\n\r\n/*方法说明\r\n *@method 方法名\r\n *@for 所属类名\r\n *@param{Blob、Buffer}data 支持File对象、Blob数据、以及OSS Buffer。\r\n * // or const data = new Blob('content');// or const data = new OSS.Buffer('content'));\r\n *@param{string} file 可以自定义为文件名（例如file.txt）或目录（例如abc/test/file.txt）的形式，\r\n * 实现将文件上传至当前Bucket或Bucket下的指定目录。实现将文件上传至当前Bucket或Bucket下的指定目录。\r\n *@return {返回值类型} 返回值说明\r\n*/\r\nexport async function uploadImage(data, file, func, err, type) {\r\n    let client\r\n\r\n    let res = await get(\"oss/ossInfo\", {})\r\n    if (res && res.data) {\r\n        const data = res.data;\r\n        client = new OSS({\r\n            region: data.endpoint,\r\n            accessKeyId: data.accessKeyId,\r\n            accessKeySecret: data.accessKeySecret,\r\n            bucket: data.bucketName\r\n        });\r\n    }\r\n\r\n    let PhotoPath = \"photo/\"\r\n\r\n    if (type == 2) {\r\n        PhotoPath = \"language/\"\r\n    } else if (type == 3) {\r\n        PhotoPath = \"article/\"\r\n    }\r\n    // 支持File对象、Blob数据、以及OSS Buffer。\r\n    // or const data = new Blob('content');\r\n    // or const data = new OSS.Buffer('content'));\r\n\r\n\r\n    try {\r\n        let result = await client.put(PhotoPath + file, data);\r\n        console.log(\"成功\", result)\r\n        func(result);\r\n    } catch (e) {\r\n        console.log(\"失败\", e)\r\n        err(e);\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport \"./UpdateUserInfo.scss\"\r\nimport {post, get} from \"../../axios\"\r\nimport {inject, observer} from \"mobx-react\";\r\nimport {uploadImage} from \"../../utils/oss\";\r\n\r\n// 观察者\r\n@inject('header')\r\n@observer\r\nclass UpdateUserInfo extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            login: true,//为true时代表登录，否则为注册\r\n            photo: \"\",\r\n            email: '',\r\n            nickName: \"\",\r\n            description: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const {header: {person}} = this.props;\r\n\r\n        if (person) {\r\n            this.setState({\r\n                photo: person.avatar,\r\n                email: person.email,\r\n                nickName: person.nickName,\r\n                description: person.description\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    addImage = () => {\r\n        this.input.click();//触发input：file的click事件，\r\n    };\r\n\r\n    handleImageChange = async (e) => {//处理图片\r\n        const file = e.target.files[0];\r\n\r\n        uploadImage(file, file.name, (res) => {\r\n            console.log(res)\r\n            this.setState({\r\n                photo: res.url\r\n            })\r\n        })\r\n    };\r\n\r\n    upload = async () => {\r\n        const {header: {person}} = this.props;\r\n        const params = {\r\n            avatar: this.state.photo,\r\n            email: this.state.email,\r\n            nickName: this.state.nickName,\r\n            description: this.state.description,\r\n            uid: person && person.uid\r\n        }\r\n        console.log(params)\r\n        const res = await post(\"/profile/editUserProfile\", params)\r\n\r\n        console.log(res)\r\n        if (res.data) {\r\n            const {header} = this.props;\r\n\r\n            //清除input值\r\n            this.email.value = \"\"\r\n\r\n            header.changeInfo(res.data);\r\n            this.props.history.push(\"/home\");\r\n            localStorage.setItem(\"userInfo\", JSON.stringify(res.data))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {photo} = this.state;\r\n        return (\r\n            <div id={\"updateInfo\"}>\r\n                <div className={\"box_6747X3\"}>\r\n\r\n                    <p className={\"text_6746X3\"}>\r\n                        请填写基本信息\r\n                    </p>\r\n\r\n                    <div onClick={this.addImage}>\r\n                        <input\r\n                            style={{\r\n                                display: 'none'\r\n                            }}\r\n                            ref={(el) => {\r\n                                this.input = el\r\n                            }}\r\n                            type='file'\r\n                            accept='image/*'\r\n                            onChange={this.handleImageChange}\r\n                        />\r\n\r\n                        <img\r\n                            className={\"default\"}\r\n                            src={photo.length != 0 ?\r\n                                photo\r\n                                : require(\"../../static/image/defualt.jpeg\")\r\n                            }\r\n                        />\r\n                    </div>\r\n\r\n                    <div className={\"text_12X1\"}>\r\n                        <input\r\n                            placeholder={\"请输入昵称\"}\r\n                            type={\"text\"}\r\n                            className={\"editValue\"}\r\n                            ref={v => this.nickName = v}\r\n                            value={this.state.nickName}\r\n                            onChange={(e) => {\r\n                                this.setState({\r\n                                    nickName: e.target.value\r\n                                })\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className={\"text_12X1\"}>\r\n                        <input\r\n                            placeholder={\"请输入邮箱\"}\r\n                            type={\"text\"}\r\n                            className={\"editValue\"}\r\n                            ref={v => this.email = v}\r\n                            value={this.state.email}\r\n                            onChange={(e) => {\r\n                                this.setState({\r\n                                    email: e.target.value\r\n                                })\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className={\"text_12X2\"}>\r\n                        <textarea\r\n                            placeholder={\"请输入个人介绍\"}\r\n                            type={\"text\"}\r\n                            className={\"editValue\"}\r\n                            ref={v => this.info = v}\r\n                            value={this.state.description}\r\n                            onChange={(e) => {\r\n                                this.setState({\r\n                                    description: e.target.value\r\n                                })\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div\r\n                        onClick={this.upload}\r\n                        className={\"text_18X1 uac_jc\"}>\r\n                        完 成\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default UpdateUserInfo\r\n","/**axios封装\r\n * 请求拦截、相应拦截、错误统一处理\r\n */\r\nimport axios from 'axios';\r\nimport QS from 'qs';\r\n// import {Toast} from 'vant';\r\n// import store from '../store/index'\r\n\r\nconst development = \"http://127.0.0.1:8888/blog/\";\r\nconst production = \"https://www.dontheway.com:8880/blog/\";\r\n\r\n// 环境的切换\r\nif (process.env.NODE_ENV == 'development') {\r\n    axios.defaults.baseURL = development;\r\n} else if (process.env.NODE_ENV == 'debug') {\r\n    axios.defaults.baseURL = '';\r\n} else if (process.env.NODE_ENV == 'production') {\r\n    axios.defaults.baseURL = production;\r\n}\r\n\r\n// 允许携带cookie，跨域设置。跨域的时候会造成无法携带cookie，这时需要允许跨域。同时后端也要进行配置\r\naxios.defaults.withCredentials = true;\r\n\r\n// 请求超时时间\r\naxios.defaults.timeout = 10000;\r\n\r\n// 请求头设置，post请求的时候必须设置'Content-Type': 'application/x-www-form-urlencoded'\r\n//以下两种写法都可以\r\naxios.defaults.headers = {\r\n    'Content-Type': 'application/x-www-form-urlencoded'\r\n};\r\n\r\n// post请求头\r\n// axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\r\n\r\n// 请求拦截器\r\naxios.interceptors.request.use(\r\n    config => {\r\n        // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\r\n        // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\r\n        // const token = store.state.token;\r\n        const token = \"\";\r\n        token && (config.headers.Authorization = token);\r\n        return config;\r\n    },\r\n    error => {\r\n        return Promise.error(error);\r\n    })\r\n\r\n// 响应拦截器\r\naxios.interceptors.response.use(\r\n    response => {\r\n        if (response.status === 200) {\r\n            return Promise.resolve(response);\r\n        } else {\r\n            return Promise.reject(response);\r\n        }\r\n    },\r\n    // 服务器状态码不是200的情况\r\n    error => {\r\n        if (error.response.status) {\r\n            switch (error.response.status) {\r\n                // 401: 未登录\r\n                // 未登录则跳转登录页面，并携带当前页面的路径\r\n                // 在登录成功后返回当前页面，这一步需要在登录页操作。\r\n                case 401:\r\n\r\n                    // router.replace({\r\n                    //     path: '/login',\r\n                    //     query: {redirect: router.currentRoute.fullPath}\r\n                    // });\r\n                    break;\r\n                // 403 token过期\r\n                // 登录过期对用户进行提示\r\n                // 清除本地token和清空vuex中token对象\r\n                // 跳转登录页面\r\n                case 403:\r\n                    // Toast({\r\n                    //     message: '登录过期，请重新登录',\r\n                    //     duration: 1000,\r\n                    //     forbidClick: true\r\n                    // });\r\n                    // // 清除token\r\n                    // localStorage.removeItem('token');\r\n                    // store.commit('loginSuccess', null);\r\n                    // // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面\r\n                    // setTimeout(() => {\r\n                    //     router.replace({\r\n                    //         path: '/login',\r\n                    //         query: {\r\n                    //             redirect: router.currentRoute.fullPath\r\n                    //         }\r\n                    //     });\r\n                    // }, 1000);\r\n                    break;\r\n                // 404请求不存在\r\n                case 404:\r\n                    // Toast({\r\n                    //     message: '网络请求不存在',\r\n                    //     duration: 1500,\r\n                    //     forbidClick: true\r\n                    // });\r\n                    break;\r\n                // 其他错误，直接抛出错误提示\r\n                default:\r\n                // Toast({\r\n                //     message: error.response.data.message,\r\n                //     duration: 1500,\r\n                //     forbidClick: true\r\n                // });\r\n            }\r\n            return Promise.reject(error.response);\r\n        }\r\n    }\r\n);\r\n\r\n/**\r\n * get方法，对应get请求\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n */\r\nexport function get(url, params) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(url, {\r\n            params: params,\r\n        })\r\n            .then(res => {\r\n                console.log(\"请求参数\", params);\r\n                console.log(\"请求地址\", url);\r\n                console.log(\"请求结果\", res);\r\n                resolve(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(\"请求错误\", err);\r\n                reject(err.data)\r\n            })\r\n    });\r\n}\r\n\r\n/**\r\n * post方法，对应post请求\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n */\r\nexport function post(url, params) {\r\n    return new Promise((resolve, reject) => {\r\n        //axios的默认Content-Type是 application/json;charset=utf-8\r\n        //params= QS.stringify(params);   这会让参数拼接在URL后面\r\n        //如果后端参数是body中拿到的，那么需要设置Content-Type': 'application/x-www-form-urlencoded'\r\n        axios.post(url, params)\r\n            .then(res => {\r\n                console.log(\"请求参数\", params);\r\n                console.log(\"请求地址\", url);\r\n                console.log(\"请求结果\", res);\r\n                resolve(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(\"请求错误\", err);\r\n                reject(err.data)\r\n            })\r\n    });\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/defualt.8e05f6fe.jpeg\";"],"sourceRoot":""}