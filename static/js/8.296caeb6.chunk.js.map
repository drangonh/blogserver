{"version":3,"sources":["page/markdown/index.js","axios/index.js"],"names":["Index","inject","observer","props","getDetail","a","state","history","location","person","header","params","userId","info","languageId","item","contentId","get","res","data","list","forEach","index","obj","setState","detail","storeTitle","markdownSrc","content","selType","handleMarkdownChange","evt","target","value","handleTitleChange","changePage","publish","publishPage","htmlContent","post","result","push","pathname","changeType","htmlMode","this","className","title","languageTitle","id","map","onSelect","eventKey","key","onClick","variant","placeholder","onChange","source","skipHtml","escapeHtml","plugins","toc","React","PureComponent","url","Promise","resolve","reject","axios","then","catch","err","defaults","baseURL","timeout","headers","interceptors","request","use","config","error","response","status"],"mappings":"4SAqBMA,EAHLC,YAAO,S,GACPC,Y,oDAGG,WAAYC,GAAQ,IAAD,uBACf,cAAMA,IAsBVC,UAvBmB,sBAuBP,oCAAAC,EAAA,6DAEFC,EAAQ,EAAKH,MAAMI,QAAQC,SAASF,MAE1BG,EAAW,EAAKN,MAAzBO,OAASD,OACVE,EAAS,CACXC,OAAQH,EAAOI,KAAKD,OACpBE,WAAYR,EAAMS,KAAKD,WACvBE,UAAWV,EAAMS,KAAKC,WARlB,SAWUC,YAAI,mBAAoBN,GAXlC,QAWFO,EAXE,SAeGA,EAAIC,OAEX,EAAKb,MAAMc,KAAKC,SAAQ,SAACN,EAAMO,GACvBP,EAAKD,YAAcI,EAAIC,KAAKL,aAC5BS,EAAMR,MAId,EAAKS,SAAS,CACVC,OAAQP,EAAIC,KACZO,WAAYR,EAAIC,KAAKO,WACrBC,YAAaT,EAAIC,KAAKS,QACtBC,QAASN,KA3BT,2CAvBO,EAuDnBO,qBAAuB,SAACC,GACpB,EAAKP,SAAS,CAACG,YAAaI,EAAIC,OAAOC,SAxDxB,EA2DnBC,kBAAoB,SAACH,GACjB,EAAKP,SAAS,CAACE,WAAYK,EAAIC,OAAOC,SA5DvB,EA+DnBE,WA/DmB,sBA+DN,sBAAA9B,EAAA,sDACT,EAAKmB,SAAS,CACVY,SAAU,EAAK9B,MAAM8B,UAFhB,2CA/DM,EAsEnBC,YAtEmB,sBAsEL,wCAAAhC,EAAA,yDACMI,EAAW,EAAKN,MAAzBO,OAASD,OADN,EAEsC,EAAKH,MAA9CuB,EAFG,EAEHA,QAASF,EAFN,EAEMA,YAFN,EAEmBS,QAASX,EAF5B,EAE4BA,OACjCI,EAHK,wDAMJlB,EAAS,CACXC,OAAQH,EAAOI,KAAKD,OACpBE,WAAYe,EAAQf,WACpBc,QAASD,EACTW,YAAa,GACbZ,WAAY,EAAKpB,MAAMoB,WACvBV,UAAWS,EAASA,EAAOT,UAAY,GAZjC,SAeQuB,YAAK,cAAe5B,GAf5B,QAeJO,EAfI,SAkBCA,EAAIC,MAAQD,EAAIC,KAAKqB,QAC5B,EAAKrC,MAAMI,QAAQkC,KAAK,CACpBC,SAAS,UApBP,4CAtEK,EA+FnBC,WAAa,SAAC5B,GACV,EAAKS,SAAS,CACVK,QAASd,KA/Fb,IAAMT,EAAQH,EAAMI,QAAQC,SAASF,MAFtB,OAGf,EAAKA,MAAQ,CACTqB,YAfO,yFAgBPiB,SAAU,MACVxB,KAAMd,EAAQA,EAAMc,KAAO,GAC3BgB,SAAS9B,GAAQA,EAAM8B,QACvBP,QAAS,KACTH,WAAY,GACZD,OAAQ,MAVG,E,gEAkBVoB,KAAKvC,MAAM8B,SACZS,KAAKzC,c,+BAmFH,IAAD,SAC4ByC,KAAKvC,MAA/Bc,EADF,EACEA,KAAMS,EADR,EACQA,QAASO,EADjB,EACiBA,QAEtB,OACI,yBAAKU,UAAU,cAEX,4BAAQA,UAAW,aAGXV,EACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAgBW,MAAOlB,EAAUA,EAAQmB,cAAgB,uCACzCC,GAAG,sBAEd7B,EAAK8B,KAAI,SAACnC,EAAMO,GACb,OACI,kBAAC,IAAD,CACI6B,SAAU,kBAAM,EAAKR,WAAW5B,IAChCqC,SAAU9B,EAAQ,EAClB+B,IAAKtC,EAAKD,YACTC,EAAKiC,oBAOxB,KAGV,yBAAKF,UAAW,QAGZV,EACI,KACA,kBAAC,IAAD,CACIkB,QAAST,KAAKV,WACdoB,QAAQ,kBACRT,UAAW,QAHf,4BASJV,EACI,kBAAC,IAAD,CACIkB,QAAST,KAAKR,YACdkB,QAAQ,qBAFZ,4BAKE,MAKd,6BAEKnB,EACG,yBAAKU,UAAW,aACZ,2BACIU,YAAa,6CACbvB,MAAOY,KAAKvC,MAAMoB,WAClB+B,SAAUZ,KAAKX,oBAEnB,8BACIsB,YAAa,mCACbvB,MAAOY,KAAKvC,MAAMqB,YAClB8B,SAAUZ,KAAKf,wBAGrB,KAIN,yBAAKgB,UAAU,QACX,kBAAC,IAAD,CACIA,UAAU,SACVY,OAAQb,KAAKvC,MAAMqB,YACnBgC,SAAkC,SAAxBd,KAAKvC,MAAMsC,SACrBgB,WAAoC,WAAxBf,KAAKvC,MAAMsC,SACvBiB,QAAS,CAACC,c,GAvLlBC,IAAMC,iB,MAkMXhE,a,gCCvNf,+FAsHO,SAASiB,EAAIgD,EAAKtD,GACrB,OAAO,IAAIuD,SAAQ,SAACC,EAASC,GACzBC,IAAMpD,IAAIgD,EAAK,CACXtD,OAAQA,IAEP2D,MAAK,SAAApD,GAIFiD,EAAQjD,EAAIC,SAEfoD,OAAM,SAAAC,GAEHJ,EAAOI,EAAIrD,YAUpB,SAASoB,EAAK0B,EAAKtD,GACtB,OAAO,IAAIuD,SAAQ,SAACC,EAASC,GAIzBC,IAAM9B,KAAK0B,EAAKtD,GACX2D,MAAK,SAAApD,GAIFiD,EAAQjD,EAAIC,SAEfoD,OAAM,SAAAC,GAEHJ,EAAOI,EAAIrD,YA1IvBkD,IAAMI,SAASC,QARA,kCAYnBL,IAAMI,SAASE,QAAU,IAIzBN,IAAMI,SAASG,QAAU,CACrB,eAAgB,qCAOpBP,IAAMQ,aAAaC,QAAQC,KACvB,SAAAC,GAMI,OAAOA,KAEX,SAAAC,GACI,OAAOf,QAAQe,MAAMA,MAI7BZ,IAAMQ,aAAaK,SAASH,KACxB,SAAAG,GACI,OAAwB,MAApBA,EAASC,OACFjB,QAAQC,QAAQe,GAEhBhB,QAAQE,OAAOc,MAI9B,SAAAD,GACI,GAAIA,EAAMC,SAASC,OAmDf,OAlDQF,EAAMC,SAASC,OAkDhBjB,QAAQE,OAAOa,EAAMC","file":"static/js/8.296caeb6.chunk.js","sourcesContent":["/**\n *\n */\nimport Markdown from \"react-markdown\"\nimport React from 'react'\nimport toc from \"remark-toc\"\nimport \"./index.scss\"\nimport {Button, ButtonGroup, DropdownButton, DropdownItem} from \"react-bootstrap\"\nimport {inject, observer} from \"mobx-react\";\nimport {post, get} from \"../../axios\";\n\nconst initialSource = `\n### 编辑文章内容\n\n使用markdown的语法\n`\n\n// 观察者\n@inject('header')\n@observer\n\nclass Index extends React.PureComponent {\n    constructor(props) {\n        super(props)\n        const state = props.history.location.state;\n        this.state = {\n            markdownSrc: initialSource,             //markdown 文本\n            htmlMode: 'raw',\n            list: state ? state.list : [],          //语言分类列表\n            publish: state ? state.publish : true,  //是否是发布文章\n            selType: null,                          //选中的语言类型\n            storeTitle: \"\",                         //文章标题\n            detail: null                            //更改时候的文章详情\n        }\n\n\n    }\n\n    componentDidMount() {\n        // 编辑时候先获取详情\n        if (!this.state.publish) {\n            this.getDetail()\n        }\n    }\n\n    getDetail = async () => {\n        let obj;\n        const state = this.props.history.location.state;\n        // state.item\n        const {header: {person}} = this.props;\n        const params = {\n            userId: person.info.userId,\n            languageId: state.item.languageId,\n            contentId: state.item.contentId,\n        };\n\n        const res = await get(\"getArticleDetail\", params)\n        console.log(res.data);\n\n\n        if (res && res.data) {\n\n            this.state.list.forEach((item, index) => {\n                if (item.languageId == res.data.languageId) {\n                    obj = item\n                }\n            });\n\n            this.setState({\n                detail: res.data,\n                storeTitle: res.data.storeTitle,\n                markdownSrc: res.data.content,\n                selType: obj\n            })\n        }\n    };\n\n    handleMarkdownChange = (evt) => {\n        this.setState({markdownSrc: evt.target.value})\n    };\n\n    handleTitleChange = (evt) => {\n        this.setState({storeTitle: evt.target.value})\n    };\n\n    changePage = async () => {\n        this.setState({\n            publish: !this.state.publish\n        })\n\n    };\n\n    publishPage = async () => {\n        const {header: {person}} = this.props;\n        const {selType, markdownSrc, publish, detail} = this.state;\n        if (!selType) {\n            return\n        }\n        const params = {\n            userId: person.info.userId,\n            languageId: selType.languageId,\n            content: markdownSrc,\n            htmlContent: \"\",\n            storeTitle: this.state.storeTitle,\n            contentId: detail ? detail.contentId : 0\n        };\n\n        const res = await post(\"editArticle\", params)\n        console.log(res)\n\n        if (res && res.data && res.data.result) {\n            this.props.history.push({\n                pathname:\"/home\"\n            })\n        }\n    };\n\n    changeType = (item) => {\n        this.setState({\n            selType: item\n        })\n    };\n\n\n    render() {\n        const {list, selType, publish} = this.state;\n        console.log(selType);\n        return (\n            <div className=\"demo plr20\">\n\n                <header className={\"top plr20\"}>\n\n                    {\n                        publish ?\n                            <ButtonGroup>\n                                <DropdownButton title={selType ? selType.languageTitle : \"选择文章类型\"}\n                                                id=\"bg-nested-dropdown\">\n\n                                    {list.map((item, index) => {\n                                        return (\n                                            <DropdownItem\n                                                onSelect={() => this.changeType(item)}\n                                                eventKey={index + 1}\n                                                key={item.languageId}>\n                                                {item.languageTitle}\n                                            </DropdownItem>\n\n                                        )\n                                    })}\n                                </DropdownButton>\n                            </ButtonGroup>\n                            : null\n                    }\n\n                    <div className={\"uf1\"}/>\n\n                    {\n                        publish ?\n                            null :\n                            <Button\n                                onClick={this.changePage}\n                                variant=\"outline-primary\"\n                                className={\"mr20\"}>\n                                修改文章\n                            </Button>\n                    }\n\n                    {\n                        publish ?\n                            <Button\n                                onClick={this.publishPage}\n                                variant=\"outline-secondary\">\n                                发布文章\n                            </Button>\n                            : null\n                    }\n\n                </header>\n\n                <div>\n\n                    {publish ?\n                        <div className={\"item left\"}>\n                            <input\n                                placeholder={\"请输入文章标题\"}\n                                value={this.state.storeTitle}\n                                onChange={this.handleTitleChange}\n                            />\n                            <textarea\n                                placeholder={\"markdown文档格式\"}\n                                value={this.state.markdownSrc}\n                                onChange={this.handleMarkdownChange}\n                            />\n                        </div>\n                        : null\n                    }\n\n\n                    <div className=\"item\">\n                        <Markdown\n                            className=\"result\"\n                            source={this.state.markdownSrc}\n                            skipHtml={this.state.htmlMode === 'skip'}\n                            escapeHtml={this.state.htmlMode === 'escape'}\n                            plugins={[toc]}\n                        />\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\n\nexport default Index\n","/**axios封装\n * 请求拦截、相应拦截、错误统一处理\n */\nimport axios from 'axios';\nimport QS from 'qs';\n// import {Toast} from 'vant';\n// import store from '../store/index'\n\nconst development = \"http://127.0.0.1:8888/\";\nconst production = \"https://www.dontheway.com:8880/\";\n\n// 环境的切换\nif (process.env.NODE_ENV == 'development') {\n    axios.defaults.baseURL = development;\n} else if (process.env.NODE_ENV == 'debug') {\n    axios.defaults.baseURL = '';\n} else if (process.env.NODE_ENV == 'production') {\n    axios.defaults.baseURL = production;\n}\n\n// 请求超时时间\naxios.defaults.timeout = 10000;\n\n// 请求头设置，post请求的时候必须设置'Content-Type': 'application/x-www-form-urlencoded'\n//以下两种写法都可以\naxios.defaults.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n};\n\n// post请求头\n// axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n\n// 请求拦截器\naxios.interceptors.request.use(\n    config => {\n        // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\n        // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\n        // const token = store.state.token;\n        const token = \"\";\n        token && (config.headers.Authorization = token);\n        return config;\n    },\n    error => {\n        return Promise.error(error);\n    })\n\n// 响应拦截器\naxios.interceptors.response.use(\n    response => {\n        if (response.status === 200) {\n            return Promise.resolve(response);\n        } else {\n            return Promise.reject(response);\n        }\n    },\n    // 服务器状态码不是200的情况\n    error => {\n        if (error.response.status) {\n            switch (error.response.status) {\n                // 401: 未登录\n                // 未登录则跳转登录页面，并携带当前页面的路径\n                // 在登录成功后返回当前页面，这一步需要在登录页操作。\n                case 401:\n\n                    // router.replace({\n                    //     path: '/login',\n                    //     query: {redirect: router.currentRoute.fullPath}\n                    // });\n                    break;\n                // 403 token过期\n                // 登录过期对用户进行提示\n                // 清除本地token和清空vuex中token对象\n                // 跳转登录页面\n                case 403:\n                    // Toast({\n                    //     message: '登录过期，请重新登录',\n                    //     duration: 1000,\n                    //     forbidClick: true\n                    // });\n                    // // 清除token\n                    // localStorage.removeItem('token');\n                    // store.commit('loginSuccess', null);\n                    // // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面\n                    // setTimeout(() => {\n                    //     router.replace({\n                    //         path: '/login',\n                    //         query: {\n                    //             redirect: router.currentRoute.fullPath\n                    //         }\n                    //     });\n                    // }, 1000);\n                    break;\n                // 404请求不存在\n                case 404:\n                    // Toast({\n                    //     message: '网络请求不存在',\n                    //     duration: 1500,\n                    //     forbidClick: true\n                    // });\n                    break;\n                // 其他错误，直接抛出错误提示\n                default:\n                // Toast({\n                //     message: error.response.data.message,\n                //     duration: 1500,\n                //     forbidClick: true\n                // });\n            }\n            return Promise.reject(error.response);\n        }\n    }\n);\n\n/**\n * get方法，对应get请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\nexport function get(url, params) {\n    return new Promise((resolve, reject) => {\n        axios.get(url, {\n            params: params,\n        })\n            .then(res => {\n                console.log(\"请求参数\", params);\n                console.log(\"请求地址\", url);\n                console.log(\"请求结果\", res);\n                resolve(res.data);\n            })\n            .catch(err => {\n                console.log(\"请求错误\", err);\n                reject(err.data)\n            })\n    });\n}\n\n/**\n * post方法，对应post请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\nexport function post(url, params) {\n    return new Promise((resolve, reject) => {\n        //axios的默认Content-Type是 application/json;charset=utf-8\n        //params= QS.stringify(params);   这会让参数拼接在URL后面\n        //如果后端参数是body中拿到的，那么需要设置Content-Type': 'application/x-www-form-urlencoded'\n        axios.post(url, params)\n            .then(res => {\n                console.log(\"请求参数\", params);\n                console.log(\"请求地址\", url);\n                console.log(\"请求结果\", res);\n                resolve(res.data);\n            })\n            .catch(err => {\n                console.log(\"请求错误\", err);\n                reject(err.data)\n            })\n    });\n}\n"],"sourceRoot":""}