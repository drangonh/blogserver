{"version":3,"sources":["page/markdown/index.js","axios/index.js"],"names":["Index","inject","observer","props","getDetail","a","state","history","location","header","person","params","languageId","item","contentId","get","res","data","list","forEach","index","obj","setState","detail","storeTitle","markdownSrc","content","selType","handleMarkdownChange","evt","target","value","handleTitleChange","changePage","publish","publishPage","htmlContent","post","result","push","pathname","changeType","htmlMode","edit","this","className","title","languageTitle","id","map","onSelect","eventKey","key","onClick","variant","placeholder","onChange","source","skipHtml","escapeHtml","plugins","toc","React","PureComponent","url","Promise","resolve","reject","axios","then","catch","err","defaults","baseURL","withCredentials","timeout","headers","interceptors","request","use","config","error","response","status"],"mappings":"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","file":"static/js/12.6db62105.chunk.js","sourcesContent":["/**\r\n *\r\n */\r\nimport Markdown from \"react-markdown\"\r\nimport React from 'react'\r\nimport toc from \"remark-toc\"\r\nimport \"./index.scss\"\r\nimport {Button, ButtonGroup, DropdownButton, DropdownItem} from \"react-bootstrap\"\r\nimport {inject, observer} from \"mobx-react\";\r\nimport {post, get} from \"../../axios\";\r\n\r\nconst initialSource = `\r\n### 编辑文章内容\r\n\r\n使用markdown的语法\r\n`\r\n\r\n// 观察者\r\n@inject('header')\r\n@observer\r\n\r\nclass Index extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props)\r\n        const state = props.history.location.state;\r\n        this.state = {\r\n            markdownSrc: initialSource,             //markdown 文本\r\n            htmlMode: 'raw',\r\n            list: state ? state.list : [],          //语言分类列表\r\n            publish: state ? state.publish : true,  //是否是发布文章\r\n            edit: state ? state.edit : false,  //是否是发布文章\r\n            selType: null,                          //选中的语言类型\r\n            storeTitle: \"\",                         //文章标题\r\n            detail: null                            //更改时候的文章详情\r\n        }\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        // 编辑时候先获取详情\r\n        if (!this.state.publish || this.state.edit) {\r\n            this.getDetail()\r\n        }\r\n    }\r\n\r\n    getDetail = async () => {\r\n        let obj;\r\n        const state = this.props.history.location.state;\r\n        // state.item\r\n        const {header: {person}} = this.props;\r\n        const params = {\r\n            languageId: state.item.languageId,\r\n            contentId: state.item.contentId,\r\n        };\r\n\r\n        const res = await get(\"markdownStore/getArticleDetail\", params)\r\n        console.log(res.data);\r\n\r\n\r\n        if (res && res.data) {\r\n\r\n            this.state.list.forEach((item, index) => {\r\n                if (item.languageId == res.data.languageId) {\r\n                    obj = item\r\n                }\r\n            });\r\n\r\n            this.setState({\r\n                detail: res.data,\r\n                storeTitle: res.data.storeTitle,\r\n                markdownSrc: res.data.content,\r\n                selType: obj\r\n            })\r\n        }\r\n    };\r\n\r\n    handleMarkdownChange = (evt) => {\r\n        this.setState({markdownSrc: evt.target.value})\r\n    };\r\n\r\n    handleTitleChange = (evt) => {\r\n        this.setState({storeTitle: evt.target.value})\r\n    };\r\n\r\n    changePage = async () => {\r\n        this.setState({\r\n            publish: !this.state.publish\r\n        })\r\n\r\n    };\r\n\r\n    publishPage = async () => {\r\n        const {header: {person}} = this.props;\r\n        const {selType, markdownSrc, publish, detail} = this.state;\r\n        if (!selType) {\r\n            return\r\n        }\r\n        const params = {\r\n            languageId: selType.languageId,\r\n            content: markdownSrc,\r\n            htmlContent: \"\",\r\n            storeTitle: this.state.storeTitle,\r\n            contentId: detail ? detail.contentId : 0\r\n        };\r\n\r\n        const res = await post(\"markdownStore/editArticle\", params)\r\n        console.log(res)\r\n\r\n        if (res && res.data && res.data.result) {\r\n            this.props.history.push({\r\n                pathname: \"/home\"\r\n            })\r\n        }\r\n    };\r\n\r\n    changeType = (item) => {\r\n        this.setState({\r\n            selType: item\r\n        })\r\n    };\r\n\r\n\r\n    render() {\r\n        const {list, selType, publish} = this.state;\r\n        console.log(selType);\r\n        return (\r\n            <div className=\"demo plr20\">\r\n\r\n                <header className={\"top plr20\"}>\r\n\r\n                    {\r\n                        publish ?\r\n                            <ButtonGroup>\r\n                                <DropdownButton title={selType ? selType.languageTitle : \"选择文章类型\"}\r\n                                                id=\"bg-nested-dropdown\">\r\n\r\n                                    {list.map((item, index) => {\r\n                                        return (\r\n                                            <DropdownItem\r\n                                                onSelect={() => this.changeType(item)}\r\n                                                eventKey={index + 1}\r\n                                                key={item.languageId}>\r\n                                                {item.languageTitle}\r\n                                            </DropdownItem>\r\n\r\n                                        )\r\n                                    })}\r\n                                </DropdownButton>\r\n                            </ButtonGroup>\r\n                            : null\r\n                    }\r\n\r\n                    <div className={\"uf1\"}/>\r\n\r\n                    {\r\n                        publish ?\r\n                            null :\r\n                            <Button\r\n                                onClick={this.changePage}\r\n                                variant=\"outline-primary\"\r\n                                className={\"mr20\"}>\r\n                                修改文章\r\n                            </Button>\r\n                    }\r\n\r\n                    {\r\n                        publish ?\r\n                            <Button\r\n                                onClick={this.publishPage}\r\n                                variant=\"outline-secondary\">\r\n                                发布文章\r\n                            </Button>\r\n                            : null\r\n                    }\r\n\r\n                </header>\r\n\r\n                <div className={\"markdownContent\"}>\r\n\r\n                    {publish ?\r\n                        <div className={\"left\"}>\r\n                            <input\r\n                                placeholder={\"请输入文章标题\"}\r\n                                value={this.state.storeTitle}\r\n                                onChange={this.handleTitleChange}\r\n                            />\r\n                            <textarea\r\n                                placeholder={\"markdown文档格式\"}\r\n                                value={this.state.markdownSrc}\r\n                                onChange={this.handleMarkdownChange}\r\n                            />\r\n                        </div>\r\n                        : null\r\n                    }\r\n\r\n\r\n                    <div className=\"right\">\r\n                        <Markdown\r\n                            className=\"result\"\r\n                            source={this.state.markdownSrc}\r\n                            skipHtml={this.state.htmlMode === 'skip'}\r\n                            escapeHtml={this.state.htmlMode === 'escape'}\r\n                            plugins={[toc]}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Index\r\n","/**axios封装\r\n * 请求拦截、相应拦截、错误统一处理\r\n */\r\nimport axios from 'axios';\r\nimport QS from 'qs';\r\n// import {Toast} from 'vant';\r\n// import store from '../store/index'\r\n\r\nconst development = \"http://127.0.0.1:8888/blog/\";\r\nconst production = \"https://www.dontheway.com:8880/blog/\";\r\n\r\n// 环境的切换\r\nif (process.env.NODE_ENV == 'development') {\r\n    axios.defaults.baseURL = development;\r\n} else if (process.env.NODE_ENV == 'debug') {\r\n    axios.defaults.baseURL = '';\r\n} else if (process.env.NODE_ENV == 'production') {\r\n    axios.defaults.baseURL = production;\r\n}\r\n\r\n// 允许携带cookie，跨域设置。跨域的时候会造成无法携带cookie，这时需要允许跨域。同时后端也要进行配置\r\naxios.defaults.withCredentials = true;\r\n\r\n// 请求超时时间\r\naxios.defaults.timeout = 10000;\r\n\r\n// 请求头设置，post请求的时候必须设置'Content-Type': 'application/x-www-form-urlencoded'\r\n//以下两种写法都可以\r\naxios.defaults.headers = {\r\n    'Content-Type': 'application/x-www-form-urlencoded'\r\n};\r\n\r\n// post请求头\r\n// axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\r\n\r\n// 请求拦截器\r\naxios.interceptors.request.use(\r\n    config => {\r\n        // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\r\n        // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\r\n        // const token = store.state.token;\r\n        const token = \"\";\r\n        token && (config.headers.Authorization = token);\r\n        return config;\r\n    },\r\n    error => {\r\n        return Promise.error(error);\r\n    })\r\n\r\n// 响应拦截器\r\naxios.interceptors.response.use(\r\n    response => {\r\n        if (response.status === 200) {\r\n            return Promise.resolve(response);\r\n        } else {\r\n            return Promise.reject(response);\r\n        }\r\n    },\r\n    // 服务器状态码不是200的情况\r\n    error => {\r\n        if (error.response.status) {\r\n            switch (error.response.status) {\r\n                // 401: 未登录\r\n                // 未登录则跳转登录页面，并携带当前页面的路径\r\n                // 在登录成功后返回当前页面，这一步需要在登录页操作。\r\n                case 401:\r\n\r\n                    // router.replace({\r\n                    //     path: '/login',\r\n                    //     query: {redirect: router.currentRoute.fullPath}\r\n                    // });\r\n                    break;\r\n                // 403 token过期\r\n                // 登录过期对用户进行提示\r\n                // 清除本地token和清空vuex中token对象\r\n                // 跳转登录页面\r\n                case 403:\r\n                    // Toast({\r\n                    //     message: '登录过期，请重新登录',\r\n                    //     duration: 1000,\r\n                    //     forbidClick: true\r\n                    // });\r\n                    // // 清除token\r\n                    // localStorage.removeItem('token');\r\n                    // store.commit('loginSuccess', null);\r\n                    // // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面\r\n                    // setTimeout(() => {\r\n                    //     router.replace({\r\n                    //         path: '/login',\r\n                    //         query: {\r\n                    //             redirect: router.currentRoute.fullPath\r\n                    //         }\r\n                    //     });\r\n                    // }, 1000);\r\n                    break;\r\n                // 404请求不存在\r\n                case 404:\r\n                    // Toast({\r\n                    //     message: '网络请求不存在',\r\n                    //     duration: 1500,\r\n                    //     forbidClick: true\r\n                    // });\r\n                    break;\r\n                // 其他错误，直接抛出错误提示\r\n                default:\r\n                // Toast({\r\n                //     message: error.response.data.message,\r\n                //     duration: 1500,\r\n                //     forbidClick: true\r\n                // });\r\n            }\r\n            return Promise.reject(error.response);\r\n        }\r\n    }\r\n);\r\n\r\n/**\r\n * get方法，对应get请求\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n */\r\nexport function get(url, params) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(url, {\r\n            params: params,\r\n        })\r\n            .then(res => {\r\n                console.log(\"请求参数\", params);\r\n                console.log(\"请求地址\", url);\r\n                console.log(\"请求结果\", res);\r\n                resolve(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(\"请求错误\", err);\r\n                reject(err.data)\r\n            })\r\n    });\r\n}\r\n\r\n/**\r\n * post方法，对应post请求\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n */\r\nexport function post(url, params) {\r\n    return new Promise((resolve, reject) => {\r\n        //axios的默认Content-Type是 application/json;charset=utf-8\r\n        //params= QS.stringify(params);   这会让参数拼接在URL后面\r\n        //如果后端参数是body中拿到的，那么需要设置Content-Type': 'application/x-www-form-urlencoded'\r\n        axios.post(url, params)\r\n            .then(res => {\r\n                console.log(\"请求参数\", params);\r\n                console.log(\"请求地址\", url);\r\n                console.log(\"请求结果\", res);\r\n                resolve(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(\"请求错误\", err);\r\n                reject(err.data)\r\n            })\r\n    });\r\n}\r\n"],"sourceRoot":""}