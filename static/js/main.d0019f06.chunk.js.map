{"version":3,"sources":["store/header.js","components/common/BaseComponent.js","components/common/Header.js","store/commonLeft.js","components/common/Loading.js","router/index.js","page/index.js","serviceWorker.js","store/test.js","store/index.js","index.js"],"names":["header","info","JSON","parse","localStorage","getItem","this","person","observable","action","obj","BaseComponent","React","Component","Header","inject","observer","props","changeName","history","push","className","onClick","src","img","userName","data","routers","component","lazy","route","loadingComponent","Loading","createHashHistory","App","Routers","map","item","index","key","path","fallback","to","Boolean","window","location","hostname","match","test","name","age","i","Number","stores","commonLeft","configure","enforceActions","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"+IAmBMA,EAAS,I,EARX,aAAe,4FACX,IAAIC,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,aAE3CC,KAAKC,OAASN,GAAc,M,oCAX/BO,K,sGAEAC,K,oFACY,SAAAC,GAET,EAAKH,OAASG,M,GAYPV,O,2FCjBTW,E,uKAME,OACI,kBAAC,IAAD,U,GAPgBC,IAAMC,WAYnBF,O,qGCATG,G,MAHLC,YAAO,S,GACPA,YAAO,a,GACPC,Y,oDAEG,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAGVC,WAAa,WACT,EAAKD,MAAME,QAAQC,KAAK,WALT,E,qDAQT,IACUb,EAAWD,KAAKW,MAAzBjB,OAASO,OAChB,OACI,yBAAKc,UAAU,UACX,yBAAKA,UAAW,WAAYC,QAAShB,KAAKY,YACtC,yBACIG,UAAW,SACXE,IAAKhB,EAAOiB,MAGhB,uBAAGH,UAAW,QAASd,EAAOkB,WAGlC,yBAAKJ,UAAW,SACZ,yBAAKA,UAAW,oB,GAvBfT,IAAMC,a,WAgCZC,O,8EChCTd,EAAS,I,EALX,aAAe,0FACXM,KAAKoB,KAAO,I,kCARflB,K,sGAEAC,K,oFACY,SAAAC,GACT,EAAKgB,KAAOhB,M,GASLV,O,mQCCAc,G,wDAbX,WAAYG,GAAQ,uCACVA,G,qDAIN,OACI,yBAAKI,UAAU,WAAf,kB,GAPST,IAAMC,YCmCZc,EA5BC,CACZ,CACIC,UARKC,gBAAK,kBAAM,4EAShBC,MAAO,QACPC,iBAAkBC,GAEtB,CACIJ,UAZMC,gBAAK,kBAAM,wDAajBC,MAAO,SACPC,iBAAkBC,GAEtB,CACIJ,UAhBSC,gBAAK,kBAAM,sEAiBpBC,MAAO,YACPC,iBAAkBC,GAEtB,CACIJ,UApBcC,gBAAK,kBAAM,qEAqBzBC,MAAO,iBACPC,iBAAkBC,GAEtB,CACIJ,UAxBeC,gBAAK,kBAAM,gEAyB1BC,MAAO,cACPC,iBAAkBC,I,OCtBpBb,EAAUc,cA6CDC,E,kDAtCX,WAAYjB,GAAQ,uCACVA,G,qDAIN,OACI,kBAAC,IAAD,KAGI,kBAAC,IAAD,KAEQkB,EAAQC,KAAI,SAACC,EAAMC,GACf,OACI,kBAAC,IAAD,CACIC,IAAKF,EAAKN,iBACVS,KAAMH,EAAKP,OACX,kBAAC,WAAD,CAAUW,SAAU,kBAACJ,EAAKN,iBAAN,OAChB,kBAACM,EAAKT,UAAN,CAAgBT,QAASA,SAQ7C,kBAAC,IAAD,CAAOqB,KAAK,KACR,kBAAC,IAAD,CAAUE,GAAG,iB,GA3BnB/B,KCNEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iDCDSC,EADF,I,EALT,aAAe,wHACX1C,KAAK2C,KAAO,mBACZ3C,KAAK4C,IAAM,I,kCAVd1C,K,+FACAA,K,qGAEAC,K,oFACW,SAAA0C,GACR,EAAKD,IAAM,EAAKA,IAAME,OAAOD,O,mBCEtBE,EALA,CACXL,OACAhD,WACAsD,gB,YCKJC,YAAU,CAACC,gBAAgB,IAG3BC,IAASC,OACL,kBAAC,IAAaL,EACV,kBAAC,EAAD,OAEFM,SAASC,eAAe,SH+GxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,S","file":"static/js/main.d0019f06.chunk.js","sourcesContent":["import {observable, action} from 'mobx';\r\n\r\nclass HeaderStore {\r\n    @observable person;\r\n\r\n    @action\r\n    changeInfo = obj => {\r\n        console.log(obj)\r\n        this.person = obj;\r\n    };\r\n\r\n    constructor() {\r\n        let info = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        console.log(info)\r\n        this.person = info ? info : null\r\n\r\n    }\r\n}\r\n\r\nconst header = new HeaderStore();\r\nexport default header\r\n\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\n\r\nclass BaseComponent extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <Header/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BaseComponent;\r\n","import React from 'react';\r\nimport './Header.scss';\r\nimport {observer, inject} from 'mobx-react';\r\nimport header from \"../../store/header\";\r\n\r\n// const person = lazy(import(\"../../static/image/person.png\"))\r\n\r\n// inject 在模块内用 @inject('test')，将 test 注入到 props 上,保证结构的一致性\r\n// 使用 @observer ，将组件变为观察者，响应 name,age 状态变化。\r\n// 当状态变化时，组件也会做相应的更新。\r\n\r\n// 观察者\r\n@inject('header')\r\n@inject('commonLeft')\r\n@observer\r\nclass Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    changeName = () => {\r\n        this.props.history.push(\"/login\")\r\n    };\r\n\r\n    render() {\r\n        const {header: {person}} = this.props;\r\n        return (\r\n            <div className=\"header\">\r\n                <div className={\"homeLeft\"} onClick={this.changeName}>\r\n                    <img\r\n                        className={\"person\"}\r\n                        src={person.img}\r\n                    />\r\n\r\n                    <p className={\"name\"}>{person.userName}</p>\r\n                </div>\r\n\r\n                <div className={\"right\"}>\r\n                    <div className={\"box_642X1\"}>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import {observable, action} from 'mobx';\r\n\r\nclass CommonLeftStore {\r\n    @observable data;\r\n\r\n    @action\r\n    changeInfo = obj => {\r\n        this.data = obj;\r\n    };\r\n\r\n    constructor() {\r\n        this.data = []\r\n    }\r\n}\r\n\r\nconst header = new CommonLeftStore();\r\nexport default header\r\n\r\n","import React from 'react';\r\nimport \"./Loading.scss\"\r\n\r\nclass Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loading\">\r\n                loading...\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import {lazy} from \"react\";\r\n\r\nimport Loading from \"../components/common/Loading\"\r\n\r\nconst Home = lazy(() => import(\"../page/home/index\"));\r\nconst Login = lazy(() => import(\"../page/login/index_1\"));\r\nconst Markdown = lazy(() => import(\"../page/markdown/index\"));\r\nconst ArticleDetail = lazy(() => import(\"../page/home/ArticleDetail\"));\r\nconst UpdateUserInfo = lazy(() => import(\"../page/home/UpdateUserInfo\"));\r\n\r\nconst routers = [\r\n    {\r\n        component: Home,\r\n        route: \"/home\",\r\n        loadingComponent: Loading\r\n    },\r\n    {\r\n        component: Login,\r\n        route: \"/login\",\r\n        loadingComponent: Loading\r\n    },\r\n    {\r\n        component: Markdown,\r\n        route: \"/markdown\",\r\n        loadingComponent: Loading\r\n    },\r\n    {\r\n        component: ArticleDetail,\r\n        route: \"/articleDetail\",\r\n        loadingComponent: Loading\r\n    },\r\n    {\r\n        component: UpdateUserInfo,\r\n        route: \"/updateInfo\",\r\n        loadingComponent: Loading\r\n    },\r\n];\r\n\r\nexport default routers\r\n","import React, {lazy, Suspense} from 'react';\r\nimport BaseComponent from \"../components/common/BaseComponent\";\r\nimport {\r\n    //// as的作用为将HashRouter重命名为Router,这样的好处是在反复测试HashRouter和BrowserRouter时,可以免去组件修改\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n} from \"react-router-dom\"\r\nimport Routers from \"../router/index\"\r\nimport {createHashHistory} from \"history\"\r\n\r\nconst history = createHashHistory();\r\n\r\n/*\r\n* 这里Redirect必须放在所有的Route之后，而且\r\n* */\r\n\r\nclass App extends BaseComponent {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n\r\n                {/*Switch匹配到一个结果后就不会继续匹配*/}\r\n                <Switch>\r\n                    {\r\n                        Routers.map((item, index) => {\r\n                            return (\r\n                                <Route\r\n                                    key={item.loadingComponent}\r\n                                    path={item.route}>\r\n                                    <Suspense fallback={<item.loadingComponent/>}>\r\n                                        <item.component history={history}/>\r\n                                    </Suspense>\r\n                                </Route>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                    {/*Redirect写法一*/}\r\n                    <Route path=\"/\">\r\n                        <Redirect to=\"/home\"/>\r\n                    </Route>\r\n\r\n                    {/*Redirect写法二*/}\r\n                    {/*<Redirect from='/' to=\"/home\"/>*/}\r\n                </Switch>\r\n\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {observable, action} from 'mobx';\r\n\r\nclass TestStore {\r\n    @observable name;\r\n    @observable age;\r\n\r\n    @action\r\n    changeAge = i => {\r\n        this.age = this.age + Number(i)\r\n    }\r\n\r\n    constructor() {\r\n        this.name = '测试mobx'\r\n        this.age = 30\r\n    }\r\n}\r\nconst test = new TestStore()\r\nexport default test\r\n","// 汇总store\r\nimport test from './test'\r\nimport header from './header'\r\nimport commonLeft from './commonLeft'\r\n\r\nconst stores = {\r\n    test,\r\n    header,\r\n    commonLeft\r\n}\r\nexport default stores\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './page/index';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {Provider} from \"mobx-react\"\r\nimport stores from './store/index'\r\n\r\nimport \"./styles/common.scss\"\r\nimport \"bootstrap/dist/css/bootstrap.css\"\r\n\r\nimport {configure} from 'mobx'; // 开启严格模式\r\nconfigure({enforceActions: true}) // 开启严格模式\r\n\r\n\r\nReactDOM.render(\r\n    <Provider {...stores}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}