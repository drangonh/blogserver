{"version":3,"sources":["store/header.js","components/common/BaseComponent.js","components/common/Header.js","store/commonLeft.js","components/common/Loading.js","router/index.js","page/index.js","serviceWorker.js","store/test.js","store/index.js","index.js"],"names":["header","info","JSON","parse","localStorage","getItem","this","person","observable","action","obj","BaseComponent","React","Component","Header","inject","observer","props","changeName","history","push","className","onClick","src","img","userName","data","routers","component","lazy","route","loadingComponent","Loading","createHashHistory","App","Routers","map","item","index","key","path","fallback","to","Boolean","window","location","hostname","match","test","name","age","i","Number","stores","commonLeft","configure","enforceActions","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"+IAmBMA,EAAS,I,EARX,aAAe,4FACX,IAAIC,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,aAE3CC,KAAKC,OAASN,GAAc,M,oCAX/BO,K,sGAEAC,K,oFACY,SAAAC,GAET,EAAKH,OAASG,M,GAYPV,O,2FCjBTW,E,uKAME,OACI,kBAAC,IAAD,U,GAPgBC,IAAMC,WAYnBF,O,qGCATG,G,MAHLC,YAAO,S,GACPA,YAAO,a,GACPC,Y,oDAEG,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAGVC,WAAa,WACT,EAAKD,MAAME,QAAQC,KAAK,WALT,E,qDAQT,IACUb,EAAWD,KAAKW,MAAzBjB,OAASO,OAChB,OACI,yBAAKc,UAAU,UACX,yBAAKA,UAAW,WAAYC,QAAShB,KAAKY,YACtC,yBACIG,UAAW,SACXE,IAAKhB,EAAOiB,MAGhB,uBAAGH,UAAW,QAASd,EAAOkB,WAGlC,yBAAKJ,UAAW,SACZ,yBAAKA,UAAW,oB,GAvBfT,IAAMC,a,WAgCZC,O,8EChCTd,EAAS,I,EALX,aAAe,0FACXM,KAAKoB,KAAO,I,kCARflB,K,sGAEAC,K,oFACY,SAAAC,GACT,EAAKgB,KAAOhB,M,GASLV,O,mQCCAc,G,wDAbX,WAAYG,GAAQ,uCACVA,G,qDAIN,OACI,yBAAKI,UAAU,WAAf,kB,GAPST,IAAMC,YCmCZc,EA5BC,CACZ,CACIC,UARKC,gBAAK,kBAAM,4EAShBC,MAAO,QACPC,iBAAkBC,GAEtB,CACIJ,UAZMC,gBAAK,kBAAM,wDAajBC,MAAO,SACPC,iBAAkBC,GAEtB,CACIJ,UAhBSC,gBAAK,kBAAM,sEAiBpBC,MAAO,YACPC,iBAAkBC,GAEtB,CACIJ,UApBcC,gBAAK,kBAAM,qEAqBzBC,MAAO,iBACPC,iBAAkBC,GAEtB,CACIJ,UAxBeC,gBAAK,kBAAM,gEAyB1BC,MAAO,cACPC,iBAAkBC,I,OCtBpBb,EAAUc,cA6CDC,E,kDAtCX,WAAYjB,GAAQ,uCACVA,G,qDAIN,OACI,kBAAC,IAAD,KAGI,kBAAC,IAAD,KAEQkB,EAAQC,KAAI,SAACC,EAAMC,GACf,OACI,kBAAC,IAAD,CACIC,IAAKF,EAAKN,iBACVS,KAAMH,EAAKP,OACX,kBAAC,WAAD,CAAUW,SAAU,kBAACJ,EAAKN,iBAAN,OAChB,kBAACM,EAAKT,UAAN,CAAgBT,QAASA,SAQ7C,kBAAC,IAAD,CAAOqB,KAAK,KACR,kBAAC,IAAD,CAAUE,GAAG,iB,GA3BnB/B,KCNEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iDCDSC,EADF,I,EALT,aAAe,wHACX1C,KAAK2C,KAAO,mBACZ3C,KAAK4C,IAAM,I,kCAVd1C,K,+FACAA,K,qGAEAC,K,oFACW,SAAA0C,GACR,EAAKD,IAAM,EAAKA,IAAME,OAAOD,O,mBCEtBE,EALA,CACXL,OACAhD,WACAsD,gB,YCKJC,YAAU,CAACC,gBAAgB,IAG3BC,IAASC,OACL,kBAAC,IAAaL,EACV,kBAAC,EAAD,OAEFM,SAASC,eAAe,SH+GxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,S","file":"static/js/main.1332521f.chunk.js","sourcesContent":["import {observable, action} from 'mobx';\n\nclass HeaderStore {\n    @observable person;\n\n    @action\n    changeInfo = obj => {\n        console.log(obj)\n        this.person = obj;\n    };\n\n    constructor() {\n        let info = JSON.parse(localStorage.getItem(\"userInfo\"));\n        console.log(info)\n        this.person = info ? info : null\n\n    }\n}\n\nconst header = new HeaderStore();\nexport default header\n\n","import React from 'react';\nimport Header from \"./Header\";\n\nclass BaseComponent extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    // }\n\n    render() {\n        return (\n            <Header/>\n        );\n    }\n}\n\nexport default BaseComponent;\n","import React from 'react';\nimport './Header.scss';\nimport {observer, inject} from 'mobx-react';\nimport header from \"../../store/header\";\n\n// const person = lazy(import(\"../../static/image/person.png\"))\n\n// inject 在模块内用 @inject('test')，将 test 注入到 props 上,保证结构的一致性\n// 使用 @observer ，将组件变为观察者，响应 name,age 状态变化。\n// 当状态变化时，组件也会做相应的更新。\n\n// 观察者\n@inject('header')\n@inject('commonLeft')\n@observer\nclass Header extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    changeName = () => {\n        this.props.history.push(\"/login\")\n    };\n\n    render() {\n        const {header: {person}} = this.props;\n        return (\n            <div className=\"header\">\n                <div className={\"homeLeft\"} onClick={this.changeName}>\n                    <img\n                        className={\"person\"}\n                        src={person.img}\n                    />\n\n                    <p className={\"name\"}>{person.userName}</p>\n                </div>\n\n                <div className={\"right\"}>\n                    <div className={\"box_642X1\"}>\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import {observable, action} from 'mobx';\n\nclass CommonLeftStore {\n    @observable data;\n\n    @action\n    changeInfo = obj => {\n        this.data = obj;\n    };\n\n    constructor() {\n        this.data = []\n    }\n}\n\nconst header = new CommonLeftStore();\nexport default header\n\n","import React from 'react';\nimport \"./Loading.scss\"\n\nclass Header extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"loading\">\n                loading...\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import {lazy} from \"react\";\n\nimport Loading from \"../components/common/Loading\"\n\nconst Home = lazy(() => import(\"../page/home/index\"));\nconst Login = lazy(() => import(\"../page/login/index_1\"));\nconst Markdown = lazy(() => import(\"../page/markdown/index\"));\nconst ArticleDetail = lazy(() => import(\"../page/home/ArticleDetail\"));\nconst UpdateUserInfo = lazy(() => import(\"../page/home/UpdateUserInfo\"));\n\nconst routers = [\n    {\n        component: Home,\n        route: \"/home\",\n        loadingComponent: Loading\n    },\n    {\n        component: Login,\n        route: \"/login\",\n        loadingComponent: Loading\n    },\n    {\n        component: Markdown,\n        route: \"/markdown\",\n        loadingComponent: Loading\n    },\n    {\n        component: ArticleDetail,\n        route: \"/articleDetail\",\n        loadingComponent: Loading\n    },\n    {\n        component: UpdateUserInfo,\n        route: \"/updateInfo\",\n        loadingComponent: Loading\n    },\n];\n\nexport default routers\n","import React, {lazy, Suspense} from 'react';\nimport BaseComponent from \"../components/common/BaseComponent\";\nimport {\n    //// as的作用为将HashRouter重命名为Router,这样的好处是在反复测试HashRouter和BrowserRouter时,可以免去组件修改\n    HashRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n} from \"react-router-dom\"\nimport Routers from \"../router/index\"\nimport {createHashHistory} from \"history\"\n\nconst history = createHashHistory();\n\n/*\n* 这里Redirect必须放在所有的Route之后，而且\n* */\n\nclass App extends BaseComponent {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Router>\n\n                {/*Switch匹配到一个结果后就不会继续匹配*/}\n                <Switch>\n                    {\n                        Routers.map((item, index) => {\n                            return (\n                                <Route\n                                    key={item.loadingComponent}\n                                    path={item.route}>\n                                    <Suspense fallback={<item.loadingComponent/>}>\n                                        <item.component history={history}/>\n                                    </Suspense>\n                                </Route>\n                            )\n                        })\n                    }\n\n                    {/*Redirect写法一*/}\n                    <Route path=\"/\">\n                        <Redirect to=\"/home\"/>\n                    </Route>\n\n                    {/*Redirect写法二*/}\n                    {/*<Redirect from='/' to=\"/home\"/>*/}\n                </Switch>\n\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {observable, action} from 'mobx';\n\nclass TestStore {\n    @observable name;\n    @observable age;\n\n    @action\n    changeAge = i => {\n        this.age = this.age + Number(i)\n    }\n\n    constructor() {\n        this.name = '测试mobx'\n        this.age = 30\n    }\n}\nconst test = new TestStore()\nexport default test\n","// 汇总store\nimport test from './test'\nimport header from './header'\nimport commonLeft from './commonLeft'\n\nconst stores = {\n    test,\n    header,\n    commonLeft\n}\nexport default stores\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './page/index';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from \"mobx-react\"\nimport stores from './store/index'\n\nimport \"./styles/common.scss\"\nimport \"bootstrap/dist/css/bootstrap.css\"\n\nimport {configure} from 'mobx'; // 开启严格模式\nconfigure({enforceActions: true}) // 开启严格模式\n\n\nReactDOM.render(\n    <Provider {...stores}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}