{"version":3,"sources":["page/login/index.js","axios/index.js"],"names":["index","inject","observer","props","login","params","userName","name","value","passWord","pwd","get","then","res","console","log","data","header","changeInfo","history","push","localStorage","setItem","JSON","stringify","register","Username","Password","ConfirmPassword","confirmPwd","post","changeState","setState","preState","state","this","className","type","ref","placeholder","hidden","onClick","React","Component","url","Promise","resolve","reject","axios","catch","err","defaults","baseURL","timeout","headers","interceptors","request","use","config","error","response","status"],"mappings":"2MASMA,EAHLC,YAAO,S,GACPC,Y,oDAGG,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAMVC,MAAQ,WACJ,IAAMC,EAAS,CAACC,SAAU,EAAKC,KAAKC,MAAOC,SAAU,EAAKC,IAAIF,OAE9DG,YAAI,QAASN,GAAQO,MAAK,SAAAC,IACtBC,QAAQC,IAAI,6BAAU,EAAKZ,OACvBU,EAAIG,QACa,EAAKb,MAAfc,OACAC,WAAWL,EAAIG,MACtB,EAAKb,MAAMgB,QAAQC,KAAK,SACxBC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUX,EAAIG,YAhB7C,EAqBnBS,SAAW,WACP,IAAMpB,EAAS,CACXqB,SAAU,EAAKnB,KAAKC,MACpBmB,SAAU,EAAKjB,IAAIF,MACnBoB,gBAAiB,EAAKC,WAAWrB,OAGrCsB,YAAK,WAAYzB,GAAQO,MAAK,SAAAC,IAC1BC,QAAQC,IAAIF,GACRA,EAAIG,QACa,EAAKb,MAAfc,OACAC,WAAWL,EAAIG,MACtB,EAAKb,MAAMgB,QAAQC,KAAK,SACxBC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUX,EAAIG,YAlC7C,EAuCnBe,YAAc,WACV,EAAKC,UAAS,SAACC,EAAU9B,GACjB,MAAO,CACHC,OAAQ,EAAK8B,MAAM9B,WAxC/B,EAAK8B,MAAQ,CACT9B,OAAO,GAHI,E,qDAgDT,IAAD,OACEA,EAAS+B,KAAKD,MAAd9B,MACP,OACI,yBAAKgC,UAAW,aACZ,2BAAOC,KAAK,OACLC,IAAK,SAAAA,GAAG,OAAI,EAAK/B,KAAO+B,GACxBF,UAAW,YACXG,YAAa,mCAGpB,2BACIF,KAAK,OACLC,IAAK,SAAAA,GAAG,OAAI,EAAK5B,IAAM4B,GACvBF,UAAW,0BACXG,YAAa,mCAGjB,2BACIC,OAAQpC,EACRkC,IAAK,SAAAA,GAAG,OAAI,EAAKT,WAAaS,GAC9BD,KAAK,OACLD,UAAW,0BACXG,YAAa,+CAGjB,yBACIE,QAASrC,EAAQ+B,KAAK/B,MAAQ+B,KAAKV,SACnCW,UAAU,0BACThC,EAAQ,eAAO,gBAGpB,uBAAGqC,QAASN,KAAKJ,YAAaK,UAAU,0BAClChC,EAAe,eAAP,qB,GAjFVsC,IAAMC,a,MAyFX3C,a,gCClGf,+FAmHO,SAASW,EAAIiC,EAAKvC,GACrB,OAAO,IAAIwC,SAAQ,SAACC,EAASC,GACzBC,IAAMrC,IAAIiC,EAAK,CACXvC,OAAQA,IAEPO,MAAK,SAAAC,GACFC,QAAQC,IAAI,2BAAQV,GACpBS,QAAQC,IAAI,2BAAQ6B,GACpB9B,QAAQC,IAAI,2BAAQF,GACpBiC,EAAQjC,EAAIG,SAEfiC,OAAM,SAAAC,GACHpC,QAAQC,IAAI,2BAAQmC,GACpBH,EAAOG,EAAIlC,YAUpB,SAASc,EAAKc,EAAKvC,GACtB,OAAO,IAAIwC,SAAQ,SAACC,EAASC,GAIzBC,IAAMlB,KAAKc,EAAKvC,GACXO,MAAK,SAAAC,GACFC,QAAQC,IAAI,2BAAQV,GACpBS,QAAQC,IAAI,2BAAQ6B,GACpB9B,QAAQC,IAAI,2BAAQF,GACpBiC,EAAQjC,EAAIG,SAEfiC,OAAM,SAAAC,GACHpC,QAAQC,IAAI,2BAAQmC,GACpBH,EAAOG,EAAIlC,YA1IvBgC,IAAMG,SAASC,QAAU,iCAI7BJ,IAAMG,SAASE,QAAU,IAIzBL,IAAMG,SAASG,QAAU,CACrB,eAAgB,qCAOpBN,IAAMO,aAAaC,QAAQC,KACvB,SAAAC,GAMI,OAAOA,KAEX,SAAAC,GACI,OAAOd,QAAQc,MAAMA,MAI7BX,IAAMO,aAAaK,SAASH,KACxB,SAAAG,GACI,OAAwB,MAApBA,EAASC,OACFhB,QAAQC,QAAQc,GAEhBf,QAAQE,OAAOa,MAI9B,SAAAD,GACI,GAAIA,EAAMC,SAASC,OAmDf,OAlDQF,EAAMC,SAASC,OAkDhBhB,QAAQE,OAAOY,EAAMC","file":"static/js/7.038b6814.chunk.js","sourcesContent":["import React from 'react';\nimport \"./index.scss\"\nimport {post,get} from \"../../axios\"\nimport {inject, observer} from \"mobx-react\";\n\n// 观察者\n@inject('header')\n@observer\n\nclass index extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            login: true,//为true时代表登录，否则为注册\n        }\n    }\n\n    login = () => {\n        const params = {userName: this.name.value, passWord: this.pwd.value};\n\n        get(\"login\", params).then(res => {\n            console.log(\"登录测试::\", this.props)\n            if (res.data) {\n                const {header} = this.props;\n                header.changeInfo(res.data);\n                this.props.history.push(\"/home\");\n                localStorage.setItem(\"userInfo\", JSON.stringify(res.data))\n            }\n        });\n    };\n\n    register = () => {\n        const params = {\n            Username: this.name.value,\n            Password: this.pwd.value,\n            ConfirmPassword: this.confirmPwd.value\n        };\n\n        post(\"register\", params).then(res => {\n            console.log(res)\n            if (res.data) {\n                const {header} = this.props;\n                header.changeInfo(res.data);\n                this.props.history.push(\"/home\");\n                localStorage.setItem(\"userInfo\", JSON.stringify(res.data))\n            }\n        });\n    };\n\n    changeState = () => {\n        this.setState((preState, props) => {\n                return {\n                    login: !this.state.login\n                }\n            }\n        )\n    };\n\n    render() {\n        const {login} = this.state;\n        return (\n            <div className={\"loginPage\"}>\n                <input type=\"text\"\n                       ref={ref => this.name = ref}\n                       className={\"editValue\"}\n                       placeholder={\"请输入账号\"}\n                />\n\n                <input\n                    type=\"text\"\n                    ref={ref => this.pwd = ref}\n                    className={\"editValue pwdMarginName\"}\n                    placeholder={\"请输入密码\"}\n                />\n\n                <input\n                    hidden={login}\n                    ref={ref => this.confirmPwd = ref}\n                    type=\"text\"\n                    className={\"editValue pwdMarginName\"}\n                    placeholder={\"请再次输入密码\"}\n                />\n\n                <div\n                    onClick={login ? this.login : this.register}\n                    className=\"loginBtn pwdMarginName\">\n                    {login ? \"登录\" : \"注册\"}\n                </div>\n\n                <p onClick={this.changeState} className=\"register pwdMarginName\">\n                    {!login ? \"登录\" : \"注册\"}\n                </p>\n            </div>\n        )\n    }\n}\n\n\nexport default index\n","/**axios封装\n * 请求拦截、相应拦截、错误统一处理\n */\nimport axios from 'axios';\nimport QS from 'qs';\n// import {Toast} from 'vant';\n// import store from '../store/index'\n\n// 环境的切换\nif (process.env.NODE_ENV == 'development') {\n    axios.defaults.baseURL = 'http://127.0.0.1:8888/';\n} else if (process.env.NODE_ENV == 'debug') {\n    axios.defaults.baseURL = '';\n} else if (process.env.NODE_ENV == 'production') {\n    axios.defaults.baseURL = 'http://www.dontheway.com:8888/';\n}\n\n// 请求超时时间\naxios.defaults.timeout = 10000;\n\n// 请求头设置，post请求的时候必须设置'Content-Type': 'application/x-www-form-urlencoded'\n//以下两种写法都可以\naxios.defaults.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n};\n\n// post请求头\n// axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n\n// 请求拦截器\naxios.interceptors.request.use(\n    config => {\n        // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\n        // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\n        // const token = store.state.token;\n        const token = \"\";\n        token && (config.headers.Authorization = token);\n        return config;\n    },\n    error => {\n        return Promise.error(error);\n    })\n\n// 响应拦截器\naxios.interceptors.response.use(\n    response => {\n        if (response.status === 200) {\n            return Promise.resolve(response);\n        } else {\n            return Promise.reject(response);\n        }\n    },\n    // 服务器状态码不是200的情况\n    error => {\n        if (error.response.status) {\n            switch (error.response.status) {\n                // 401: 未登录\n                // 未登录则跳转登录页面，并携带当前页面的路径\n                // 在登录成功后返回当前页面，这一步需要在登录页操作。\n                case 401:\n\n                    // router.replace({\n                    //     path: '/login',\n                    //     query: {redirect: router.currentRoute.fullPath}\n                    // });\n                    break;\n                // 403 token过期\n                // 登录过期对用户进行提示\n                // 清除本地token和清空vuex中token对象\n                // 跳转登录页面\n                case 403:\n                    // Toast({\n                    //     message: '登录过期，请重新登录',\n                    //     duration: 1000,\n                    //     forbidClick: true\n                    // });\n                    // // 清除token\n                    // localStorage.removeItem('token');\n                    // store.commit('loginSuccess', null);\n                    // // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面\n                    // setTimeout(() => {\n                    //     router.replace({\n                    //         path: '/login',\n                    //         query: {\n                    //             redirect: router.currentRoute.fullPath\n                    //         }\n                    //     });\n                    // }, 1000);\n                    break;\n                // 404请求不存在\n                case 404:\n                    // Toast({\n                    //     message: '网络请求不存在',\n                    //     duration: 1500,\n                    //     forbidClick: true\n                    // });\n                    break;\n                // 其他错误，直接抛出错误提示\n                default:\n                // Toast({\n                //     message: error.response.data.message,\n                //     duration: 1500,\n                //     forbidClick: true\n                // });\n            }\n            return Promise.reject(error.response);\n        }\n    }\n);\n\n/**\n * get方法，对应get请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\nexport function get(url, params) {\n    return new Promise((resolve, reject) => {\n        axios.get(url, {\n            params: params,\n        })\n            .then(res => {\n                console.log(\"请求参数\", params);\n                console.log(\"请求地址\", url);\n                console.log(\"请求结果\", res);\n                resolve(res.data);\n            })\n            .catch(err => {\n                console.log(\"请求错误\", err);\n                reject(err.data)\n            })\n    });\n}\n\n/**\n * post方法，对应post请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\nexport function post(url, params) {\n    return new Promise((resolve, reject) => {\n        //axios的默认Content-Type是 application/json;charset=utf-8\n        //params= QS.stringify(params);   这会让参数拼接在URL后面\n        //如果后端参数是body中拿到的，那么需要设置Content-Type': 'application/x-www-form-urlencoded'\n        axios.post(url, params)\n            .then(res => {\n                console.log(\"请求参数\", params);\n                console.log(\"请求地址\", url);\n                console.log(\"请求结果\", res);\n                resolve(res.data);\n            })\n            .catch(err => {\n                console.log(\"请求错误\", err);\n                reject(err.data)\n            })\n    });\n}\n"],"sourceRoot":""}