{"version":3,"sources":["components/home/ListItem.js","components/home/SuspendBtn.js","page/home/HomeContent.js","page/home/index.js","axios/index.js"],"names":["React","Component","SuspendBtn","props","addType","suspendBtn","publish","setState","preState","title","state","popoverLeft","Popover","id","className","Button","onClick","this","OverlayTrigger","rootClose","trigger","placement","overlay","HomeContent","inject","observer","getList","nextProps","a","person","header","languageId","params","userId","info","get","res","console","log","data","list","openPage","item","history","push","pathname","types","languageContent","map","index","Alert","key","contentId","variant","source","brief","skipHtml","htmlMode","escapeHtml","plugins","toc","BaseComponent","App","selType","length","showModal","commit","content","languageTitle","post","result","handleChange","p1","target","value","changeContent","changeSelType","Header","renderModal","Modal","show","onHide","closeButton","Title","Body","FormControl","type","placeholder","onChange","Footer","url","Promise","resolve","reject","axios","then","catch","err","defaults","baseURL","timeout","headers","interceptors","request","use","config","error","response","status"],"mappings":"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","file":"static/js/6.9135a711.chunk.js","sourcesContent":["import React from 'react';\nimport './listItem.scss';\nimport PropTypes from 'prop-types'\n\nclass ListItem extends React.Component {\n    static propTypes = {\n        item: PropTypes.object.isRequired\n    }\n\n    render() {\n        const {item} = this.props;\n        return (\n            <div onSelect={this.openPageList} className=\"listItem\">\n                <div className={\"title\"}>\n                    {item.languageTitle}\n                </div>\n\n                <div className={\"content\"}>\n                    {item.languageContent}\n                </div>\n            </div>\n        );\n    }\n\n    //跳转到指定语言分类的文章列表\n    openPageList = () => {\n        this.props.history({\n            pathname: \"\",\n            state: {}\n        })\n    }\n}\n\nexport default ListItem;\n","import React from 'react';\nimport './SuspendBtn.scss';\nimport PropTypes from \"prop-types\"\nimport {Button, OverlayTrigger, Popover,Modal} from 'react-bootstrap';\n\nclass SuspendBtn extends React.Component {\n    static  propTypes = {\n        suspendBtn: PropTypes.func.isRequired,\n        publish: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: \"开门\"\n        };\n        this.popoverLeft = (\n            <Popover id=\"popover-positioned-left\" className={\"leftPopover\"} title=\"\">\n                <Button onClick={this.addType}>新增分类</Button>\n                <Button onClick={this.publish}>发布文章</Button>\n            </Popover>\n        );\n    }\n\n    addType = () => {\n        const {suspendBtn} = this.props;\n        suspendBtn && suspendBtn()\n    };\n\n    publish = () => {\n        const {publish} = this.props;\n        publish && publish()\n    };\n\n    suspendBtn = () => {\n        this.setState((preState, props) => {\n            return {\n                title: preState.title == \"开门\" ? \"关门\" : \"开门\"\n            }\n        });\n    }\n\n    render() {\n        const {title} = this.state;\n        return (\n            <div onClick={this.suspendBtn} className=\"suspendBtn\">\n                <OverlayTrigger rootClose={true} trigger=\"click\" placement=\"left\" overlay={this.popoverLeft}>\n                    <Button className={\"button\"}>{title}</Button>\n                </OverlayTrigger>\n            </div>\n        );\n    }\n}\n\nexport default SuspendBtn;\n","/**\n * 首页\n * author:dragonh\n * time:2020/4/30\n **/\nimport React from 'react';\nimport './index.scss';\nimport BaseComponent from \"../../components/common/BaseComponent\";\nimport {Alert} from \"react-bootstrap\";\nimport {get} from \"../../axios\";\nimport {inject, observer} from \"mobx-react\";\nimport toc from \"remark-toc\";\nimport Markdown from \"react-markdown\";\n\n// 观察者\n@inject('header')\n@observer\nclass HomeContent extends BaseComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            list: [],\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.getList(nextProps)\n    }\n\n    getList = async (nextProps) => {\n        const {header: {person}} = this.props;\n        const {languageId} = nextProps;\n\n        const params = {\n            userId: person.info.userId,\n            languageId: languageId\n        };\n\n        const res = await get(\"getArticleList\", params);\n\n        console.log(res.data)\n        if (res.data) {\n            this.setState({\n                list: res.data,\n            })\n        }else {\n            this.setState({\n                list: [],\n            })\n        }\n    };\n\n    //跳转到文章详情页\n    openPage = (item) => {\n        this.props.history.push({\n            pathname: \"/markdown\",\n            state: {\n                list: this.props.types,\n                publish: false,\n                item: item\n            }\n        });\n    };\n\n    render() {\n        const {languageContent} = this.props;\n        const {list} = this.state;\n        return (\n            <div className={\"contentRight\"}>\n                <div className={\"languageContent\"}>\n                    简介： {languageContent}\n                </div>\n\n                {\n                    list.map((item, index) => {\n                        return (\n                            <Alert key={item.contentId} variant=\"dark\" onClick={() => this.openPage(item)}>\n\n                                {/*<Alert.Heading>*/}\n                                {/*{item.storeTitle}*/}\n                                {/*</Alert.Heading>*/}\n\n                                {/*<p className={\"content\"}>*/}\n                                {/*{item.brief}*/}\n                                {/*</p>*/}\n\n                                <Markdown\n                                    className=\"content\"\n                                    source={item.brief}\n                                    skipHtml={this.state.htmlMode === 'skip'}\n                                    escapeHtml={this.state.htmlMode === 'escape'}\n                                    plugins={[toc]}\n                                />\n                            </Alert>\n                        )\n                    })\n                }\n\n            </div>\n        );\n    }\n\n}\n\nexport default HomeContent;\n","/**\n * 首页\n * author:dragonh\n * time:2020/4/30\n **/\nimport React from 'react';\nimport './index.scss';\nimport Header from \"../../components/common/Header\";\nimport BaseComponent from \"../../components/common/BaseComponent\";\nimport ListItem from \"../../components/home/ListItem\";\nimport SuspendBtn from \"../../components/home/SuspendBtn\";\nimport {Button, FormControl, Modal, Alert} from \"react-bootstrap\";\nimport {post, get} from \"../../axios\";\nimport {inject, observer} from \"mobx-react\";\nimport HomeContent from \"./HomeContent\";\n\n// 观察者\n@inject('header')\n@observer\nclass App extends BaseComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showModal: false,\n            title: \"\",\n            content: \"\",\n            list: [],\n            selType: {}\n        }\n    }\n\n    componentDidMount() {\n        this.getList()\n    }\n\n    getList = async () => {\n        const {header: {person}} = this.props;\n\n        const params = {userId: person.info.userId};\n        const res = await get(\"getLanguageList\", params);\n\n        console.log(res.data)\n        if (res.data) {\n            this.setState({\n                list: res.data,\n                selType: res.data.length != 0 ? res.data[0] : {}\n            })\n        }\n    };\n\n    suspendBtn = () => {\n        this.setState({\n            showModal: !this.state.showModal\n        })\n    };\n\n    commit = async () => {\n        const {header: {person}} = this.props;\n\n        if (person.info) {\n            const params = {\n                languageContent: this.state.content,\n                languageTitle: this.state.title,\n                userId: person.info.userId\n            };\n\n\n            const res = await post(\"editLanguage\", params)\n            if (res.data && res.data.result) {\n\n            }\n        } else {\n            this.props.history.push(\"/login\");\n        }\n\n        this.suspendBtn()\n        this.getList()\n    };\n\n    handleChange = (p1) => {\n        this.setState({\n            title: p1.target.value\n        })\n    };\n\n    changeContent = (p1) => {\n        this.setState({\n            content: p1.target.value\n        })\n    };\n\n    publish = () => {\n        this.props.history.push({\n            pathname: \"/markdown\",\n            state: {\n                list: this.state.list,\n                publish: true\n            }\n        });\n    };\n\n    //改变选中的语言\n    changeSelType = (item) => {\n        this.setState({\n            selType: item\n        })\n    };\n\n    render() {\n        const {list, selType} = this.state;\n        return (\n            <div className=\"wrap\">\n\n                <Header {...this.props}/>\n\n                <div className={\"homeContent\"}>\n\n                    <div className={\"contentLeft\"}>\n\n\n                        {list.map((item, index) => {\n                            return (\n                                <div onClick={() => this.changeSelType(item)}\n                                     className={selType.languageId == item.languageId ? \"leftItem selLeftItem\" : \"leftItem\"}\n                                     key={item.languageId}>\n                                    {item.languageTitle}\n                                </div>\n                            )\n                        })}\n                    </div>\n\n                    <HomeContent\n                        types={list}\n                        history={this.props.history}\n                        languageContent={selType.languageContent}\n                        languageId={selType.languageId}/>\n\n                </div>\n\n                {/*悬浮按钮*/}\n                <SuspendBtn\n                    publish={this.publish}\n                    suspendBtn={this.suspendBtn}/>\n\n                {this.renderModal()}\n            </div>\n        );\n    }\n\n    renderModal() {\n        return (\n            <Modal show={this.state.showModal} onHide={this.suspendBtn}>\n                <Modal.Header closeButton>\n                    <Modal.Title>新增分类</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <h5>分类名称</h5>\n                    <FormControl\n                        className={\"type\"}\n                        type=\"text\"\n                        value={this.state.title}\n                        placeholder=\"请输入分类名称\"\n                        onChange={this.handleChange}\n                    />\n\n                    <h5>分类介绍</h5>\n\n                    <textarea\n                        value={this.state.content}\n                        onChange={this.changeContent}\n                        className=\"introduce\"\n                        placeholder={\"请输入分类介绍\"}\n                    />\n\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button onClick={this.commit}>确定</Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n}\n\nexport default App;\n","/**axios封装\n * 请求拦截、相应拦截、错误统一处理\n */\nimport axios from 'axios';\nimport QS from 'qs';\n// import {Toast} from 'vant';\n// import store from '../store/index'\n\nconst development = \"http://127.0.0.1:8888/\";\nconst production = \"http://www.dontheway.com:8888/\";\n\n// 环境的切换\nif (process.env.NODE_ENV == 'development') {\n    axios.defaults.baseURL = development;\n} else if (process.env.NODE_ENV == 'debug') {\n    axios.defaults.baseURL = '';\n} else if (process.env.NODE_ENV == 'production') {\n    axios.defaults.baseURL = production;\n}\n\n// 请求超时时间\naxios.defaults.timeout = 10000;\n\n// 请求头设置，post请求的时候必须设置'Content-Type': 'application/x-www-form-urlencoded'\n//以下两种写法都可以\naxios.defaults.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n};\n\n// post请求头\n// axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n\n// 请求拦截器\naxios.interceptors.request.use(\n    config => {\n        // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\n        // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\n        // const token = store.state.token;\n        const token = \"\";\n        token && (config.headers.Authorization = token);\n        return config;\n    },\n    error => {\n        return Promise.error(error);\n    })\n\n// 响应拦截器\naxios.interceptors.response.use(\n    response => {\n        if (response.status === 200) {\n            return Promise.resolve(response);\n        } else {\n            return Promise.reject(response);\n        }\n    },\n    // 服务器状态码不是200的情况\n    error => {\n        if (error.response.status) {\n            switch (error.response.status) {\n                // 401: 未登录\n                // 未登录则跳转登录页面，并携带当前页面的路径\n                // 在登录成功后返回当前页面，这一步需要在登录页操作。\n                case 401:\n\n                    // router.replace({\n                    //     path: '/login',\n                    //     query: {redirect: router.currentRoute.fullPath}\n                    // });\n                    break;\n                // 403 token过期\n                // 登录过期对用户进行提示\n                // 清除本地token和清空vuex中token对象\n                // 跳转登录页面\n                case 403:\n                    // Toast({\n                    //     message: '登录过期，请重新登录',\n                    //     duration: 1000,\n                    //     forbidClick: true\n                    // });\n                    // // 清除token\n                    // localStorage.removeItem('token');\n                    // store.commit('loginSuccess', null);\n                    // // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面\n                    // setTimeout(() => {\n                    //     router.replace({\n                    //         path: '/login',\n                    //         query: {\n                    //             redirect: router.currentRoute.fullPath\n                    //         }\n                    //     });\n                    // }, 1000);\n                    break;\n                // 404请求不存在\n                case 404:\n                    // Toast({\n                    //     message: '网络请求不存在',\n                    //     duration: 1500,\n                    //     forbidClick: true\n                    // });\n                    break;\n                // 其他错误，直接抛出错误提示\n                default:\n                // Toast({\n                //     message: error.response.data.message,\n                //     duration: 1500,\n                //     forbidClick: true\n                // });\n            }\n            return Promise.reject(error.response);\n        }\n    }\n);\n\n/**\n * get方法，对应get请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\nexport function get(url, params) {\n    return new Promise((resolve, reject) => {\n        axios.get(url, {\n            params: params,\n        })\n            .then(res => {\n                console.log(\"请求参数\", params);\n                console.log(\"请求地址\", url);\n                console.log(\"请求结果\", res);\n                resolve(res.data);\n            })\n            .catch(err => {\n                console.log(\"请求错误\", err);\n                reject(err.data)\n            })\n    });\n}\n\n/**\n * post方法，对应post请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\nexport function post(url, params) {\n    return new Promise((resolve, reject) => {\n        //axios的默认Content-Type是 application/json;charset=utf-8\n        //params= QS.stringify(params);   这会让参数拼接在URL后面\n        //如果后端参数是body中拿到的，那么需要设置Content-Type': 'application/x-www-form-urlencoded'\n        axios.post(url, params)\n            .then(res => {\n                console.log(\"请求参数\", params);\n                console.log(\"请求地址\", url);\n                console.log(\"请求结果\", res);\n                resolve(res.data);\n            })\n            .catch(err => {\n                console.log(\"请求错误\", err);\n                reject(err.data)\n            })\n    });\n}\n"],"sourceRoot":""}