**ITelephony与停止通话**
* 停止通话的方法endCall()依赖ITelephony
* android挂断电话的调用方法在ITelephony.java里而ITelephony.java是隐藏的，我们不能直接调用endCall()方法所以我们要实现就绪做如下操作。
* 首先，在项目src\main文件夹下创建一个aidl文件夹；在aidl创建一个包路径为com.android.internal.telephony的文件夹；在文件夹里面创建ITelephony.aidl文件；然后编译项目会自动生成ITelephony。Java文件
*
```
package com.android.internal.telephony;

import android.os.Bundle;
import java.util.List;
import android.telephony.NeighboringCellInfo;

/**
 * Interface used to interact with the phone.  Mostly this is used by the
 * TelephonyManager class.  A few places are still using this directly.
 * Please clean them up if possible and use TelephonyManager insteadl.
 *
 * {@hide}
 */
interface ITelephony {

    /**
     * Dial a number. This doesn't place the call. It displays
     * the Dialer screen.
     * @param number the number to be dialed. If null, this
     * would display the Dialer screen with no number pre-filled.
     */
    void dial(String number);

    /**
     * Place a call to the specified number.
     * @param number the number to be called.
     */
    void call(String number);

    /**
     * If there is currently a call in progress, show the call screen.
     * The DTMF dialpad may or may not be visible initially, depending on
     * whether it was up when the user last exited the InCallScreen.
     *
     * @return true if the call screen was shown.
     */
    boolean showCallScreen();

    /**
     * Variation of showCallScreen() that also specifies whether the
     * DTMF dialpad should be initially visible when the InCallScreen
     * comes up.
     *
     * @param showDialpad if true, make the dialpad visible initially,
     *                    otherwise hide the dialpad initially.
     * @return true if the call screen was shown.
     *
     * @see showCallScreen
     */
    boolean showCallScreenWithDialpad(boolean showDialpad);

    /**
     * End call or go to the Home screen
     *
     * @return whether it hung up
     */
    boolean endCall();

    /**
     * Answer the currently-ringing call.
     *
     * If there's already a current active call, that call will be
     * automatically put on hold.  If both lines are currently in use, the
     * current active call will be ended.
     *
     * TODO: provide a flag to let the caller specify what policy to use
     * if both lines are in use.  (The current behavior is hardwired to
     * "answer incoming, end ongoing", which is how the CALL button
     * is specced to behave.)
     *
     * TODO: this should be a oneway call (especially since it's called
     * directly from the key queue thread).
     */
    void answerRingingCall();

    /**
     * Silence the ringer if an incoming call is currently ringing.
     * (If vibrating, stop the vibrator also.)
     *
     * It's safe to call this if the ringer has already been silenced, or
     * even if there's no incoming call.  (If so, this method will do nothing.)
     *
     * TODO: this should be a oneway call too (see above).
     *       (Actually *all* the methods here that return void can
     *       probably be oneway.)
     */
    void silenceRinger();

    /**
     * Check if we are in either an active or holding call
     * @return true if the phone state is OFFHOOK.
     */
    boolean isOffhook();

    /**
     * Check if an incoming phone call is ringing or call waiting.
     * @return true if the phone state is RINGING.
     */
    boolean isRinging();

    /**
     * Check if the phone is idle.
     * @return true if the phone state is IDLE.
     */
    boolean isIdle();

    /**
     * Check to see if the radio is on or not.
     * @return returns true if the radio is on.
     */
    boolean isRadioOn();

    /**
     * Check if the SIM pin lock is enabled.
     * @return true if the SIM pin lock is enabled.
     */
    boolean isSimPinEnabled();

    /**
     * Cancels the missed calls notification.
     */
    void cancelMissedCallsNotification();

    /**
     * Supply a pin to unlock the SIM.  Blocks until a result is determined.
     * @param pin The pin to check.
     * @return whether the operation was a success.
     */
    boolean supplyPin(String pin);

    /**
     * Handles PIN MMI commands (PIN/PIN2/PUK/PUK2), which are initiated
     * without SEND (so <code>dial</code> is not appropriate).
     *
     * @param dialString the MMI command to be executed.
     * @return true if MMI command is executed.
     */
    boolean handlePinMmi(String dialString);

    /**
     * Toggles the radio on or off.
     */
    void toggleRadioOnOff();

    /**
     * Set the radio to on or off
     */
    boolean setRadio(boolean turnOn);

    /**
     * Request to update location information in service state
     */
    void updateServiceLocation();

    /**
     * Enable location update notifications.
     */
    void enableLocationUpdates();

    /**
     * Disable location update notifications.
     */
    void disableLocationUpdates();

    /**
     * Enable a specific APN type.
     */
    int enableApnType(String type);

    /**
     * Disable a specific APN type.
     */
    int disableApnType(String type);

    /**
     * Allow mobile data connections.
     */
    boolean enableDataConnectivity();

    /**
     * Disallow mobile data connections.
     */
    boolean disableDataConnectivity();

    /**
     * Report whether data connectivity is possible.
     */
    boolean isDataConnectivityPossible();

    Bundle getCellLocation();

    /**
     * Returns the neighboring cell information of the device.
     */
    List<NeighboringCellInfo> getNeighboringCellInfo();

     int getCallState();
     int getDataActivity();
     int getDataState();
}
```
* 新建文件：PhoneEndCallModule
```
package com.extensionactivity;

import android.content.Context;
import android.os.RemoteException;
import android.telephony.TelephonyManager;

import androidx.annotation.NonNull;

import com.android.internal.telephony.ITelephony;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;

import java.lang.reflect.Method;

public class PhoneEndCallModule extends ReactContextBaseJavaModule {
    private static ReactApplicationContext reactContext;
    private static PhoneEndCallModule phoneModule;

    public PhoneEndCallModule(ReactApplicationContext reactContext) {
        super(reactContext);

        if (phoneModule == null) {
            phoneModule = this;
        }
        phoneModule.reactContext = reactContext;
    }


    @NonNull
    @Override
    public String getName() {
        return "PhoneModule";
    }


    private static ITelephony iTelephony;

    public static void InitItelephony(Context context) {
        if (null != iTelephony) {
            return;
        }
        TelephonyManager localTelephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        try {
            Method localMethod = TelephonyManager.class.getDeclaredMethod("getITelephony", (Class[]) null);
            localMethod.setAccessible(true);
            iTelephony = ((ITelephony) localMethod.invoke(localTelephonyManager, (Object[]) null));
        } catch (Exception localException1) {
            localException1.printStackTrace();
        }
    }

    public static void toEnd(Context context) {
        try {
            if (iTelephony == null) {
                InitItelephony(context);
            }
            iTelephony.endCall();//挂断电话
            try {
                iTelephony.cancelMissedCallsNotification();//取消通知栏的未接来电通知
            } catch (NoSuchMethodError ex) {
                ex.printStackTrace();
            }
        } catch (RemoteException localRemoteException) {
            while (true)
                localRemoteException.printStackTrace();
        }
    }

    @ReactMethod
    public void PhoneEndCall() {
        try {
            if (iTelephony == null) {
                InitItelephony(phoneModule.reactContext);
            }
            iTelephony.endCall();//挂断电话
            try {
                iTelephony.cancelMissedCallsNotification();//取消通知栏的未接来电通知
            } catch (NoSuchMethodError ex) {
                ex.printStackTrace();
            }
        } catch (RemoteException localRemoteException) {
            while (true)
                localRemoteException.printStackTrace();
        }
    }
}

```
* 新建文件：PhoneEndCallPackage
```
package com.extensionactivity;
//PhoneEndCallPackage

import androidx.annotation.NonNull;

import com.facebook.react.ReactPackage;
import com.facebook.react.bridge.JavaScriptModule;
import com.facebook.react.bridge.NativeModule;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.uimanager.ViewManager;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class PhoneEndCallPackage implements ReactPackage {

    @Override
    public List<NativeModule> createNativeModules(
            ReactApplicationContext reactContext) {
        List<NativeModule> modules = new ArrayList<>();

        modules.add(new PhoneEndCallModule(reactContext));

        return modules;
    }

    // override removed to be compatible with rn0.47+
    //@Override
    public List<Class<? extends JavaScriptModule>> createJSModules() {
        return Collections.emptyList();
    }

    @Override
    public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {
        return Collections.emptyList();
    }

//    public static void onRequestPermissionsResult(int requestCode, @NonNull String permissions[],
//                                                  @NonNull int[] grantResults) {
//        PhoneEndCallModule.PhoneEndCall(requestCode, permissions, grantResults);
//    }

}

```

**自动拨打电话并且停止通话**
* 需要申请权限："<uses-permission android:name="android.permission.CALL_PHONE" /\>"(这里结尾的这个\>是防止在markdown文档中被转义了)，权限申请在AndroidManifest.xml文件中
* 新建一个RNImmediatePhoneCallModule，具体实现代码为：
```
package com.extensionactivity;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Handler;
import android.telephony.TelephonyManager;

import androidx.annotation.NonNull;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import com.android.internal.telephony.ITelephony;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;

import java.lang.reflect.Method;

public class RNImmediatePhoneCallModule extends ReactContextBaseJavaModule {

    private static RNImmediatePhoneCallModule rnImmediatePhoneCallModule;

    private ReactApplicationContext reactContext;
    private static String number = "";
    private static final int PERMISSIONS_REQUEST_ACCESS_CALL = 101;

    public RNImmediatePhoneCallModule(ReactApplicationContext reactContext) {
        super(reactContext);
        if (rnImmediatePhoneCallModule == null) {
            rnImmediatePhoneCallModule = this;
        }
        rnImmediatePhoneCallModule.reactContext = reactContext;
    }

    @Override
    public String getName() {
        return "RNImmediatePhoneCall";
    }

    @ReactMethod
    public void immediatePhoneCall(String number, boolean callEnd, final Callback callback) {
        RNImmediatePhoneCallModule.number = Uri.encode(number);

        // 判断是否有拨电话的权限，没有的话就去打开权限
        if (ContextCompat.checkSelfPermission(getReactApplicationContext(),
                android.Manifest.permission.CALL_PHONE) == PackageManager.PERMISSION_GRANTED) {
            call(callEnd, callback);
        } else {
            //打开权限
            ActivityCompat.requestPermissions(getCurrentActivity(),
                    new String[]{android.Manifest.permission.CALL_PHONE},
                    PERMISSIONS_REQUEST_ACCESS_CALL);
        }
    }

    private static ITelephony iTelephony;

    @SuppressLint("MissingPermission")
    private static void call(boolean callEnd, final Callback callback) {
        String url = "tel:" + RNImmediatePhoneCallModule.number;

        // 开始直接拨打电话
        Intent intent2 = new Intent(Intent.ACTION_CALL, Uri.parse(url));
        intent2.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        rnImmediatePhoneCallModule.reactContext.startActivity(intent2);

//        new Handler().postDelayed(new Runnable() {
//            public void run() {
//                try {
//                    PhoneEndCallModule.toEnd(rnImmediatePhoneCallModule.reactContext);
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            }
//        }, 5 * 1000);

        // callEnd:true自动挂断电话
        if (callEnd) {
            new Handler().postDelayed(new Runnable() {
                public void run() {
                    try {
                        // 延迟5秒后自动挂断电话
                        // 首先拿到TelephonyManager
                        TelephonyManager telMag = (TelephonyManager) rnImmediatePhoneCallModule.reactContext.getSystemService(rnImmediatePhoneCallModule.reactContext.TELEPHONY_SERVICE);
                        Class<TelephonyManager> c = TelephonyManager.class;

                        // 再去反射TelephonyManager里面的私有方法 getITelephony 得到 ITelephony对象
                        Method mthEndCall = c.getDeclaredMethod("getITelephony", (Class[]) null);

                        //允许访问私有方法
                        mthEndCall.setAccessible(true);

//                    final Object obj = mthEndCall.invoke(telMag, (Object[]) null);

                        iTelephony = ((ITelephony) mthEndCall.invoke(telMag, (Object[]) null));

                        iTelephony.endCall();//挂断电话
                        if (callback != null) {
                            callback.invoke(true);
                        }
//                    // 再通过ITelephony对象去反射里面的endCall方法，挂断电话
//                    Method mt = obj.getClass().getMethod("endCall");
//                    //允许访问私有方法
//                    mt.setAccessible(true);
//                    mt.invoke(obj);
                    } catch (Exception e) {
                        callback.invoke(false);
                        e.printStackTrace();
                    }
                }
            }, 5 * 1000);
        }else {
            callback.invoke(true);
        }

    }


    public static void onRequestPermissionsResult(int requestCode, @NonNull String permissions[], @NonNull int[] grantResults) {
        switch (requestCode) {
            case PERMISSIONS_REQUEST_ACCESS_CALL: {

                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    call(false, null);
                }
            }
        }
    }
}

```

* 新建RNImmediatePhoneCallPackage文件，具体代码为：
```
package com.extensionactivity;

import androidx.annotation.NonNull;

import com.facebook.react.ReactPackage;
import com.facebook.react.bridge.JavaScriptModule;
import com.facebook.react.bridge.NativeModule;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.uimanager.ViewManager;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class RNImmediatePhoneCallPackage implements ReactPackage {

    @Override
    public List<NativeModule> createNativeModules(
            ReactApplicationContext reactContext) {
        List<NativeModule> modules = new ArrayList<>();

        modules.add(new RNImmediatePhoneCallModule(reactContext));

        return modules;
    }

    // override removed to be compatible with rn0.47+
    //@Override
    public List<Class<? extends JavaScriptModule>> createJSModules() {
        return Collections.emptyList();
    }

    @Override
    public List<ViewManager> createViewManagers(
            ReactApplicationContext reactContext) {
        return Collections.emptyList();
    }

	public static void onRequestPermissionsResult(int requestCode, @NonNull String permissions[],
                                                  @NonNull int[] grantResults) {
        RNImmediatePhoneCallModule.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }

}

```
* 需要在MainApplication中添加package：
```
@Override
                protected List<ReactPackage> getPackages() {
                    @SuppressWarnings("UnnecessaryLocalVariable")
                    List<ReactPackage> packages = new PackageList(this).getPackages();
                    // Packages that cannot be autolinked yet can be added manually here, for example:
                    // packages.add(new MyReactNativePackage());
                    packages.add(new PhoneEndCallPackage());//添加自定义的模块
                    packages.add(new RNImmediatePhoneCallPackage());
                    return packages;
                }
```

**在RN中使用**
* RNImmediatePhoneCall.js
*
```
import {NativeModules} from 'react-native';

var RNImmediatePhoneCall = {
    // autoEnd:是否自动挂断电话
    // number：拨打的手机号码
    immediatePhoneCall: function(number,autoEnd,callBack) {
        NativeModules.RNImmediatePhoneCall.immediatePhoneCall(number,autoEnd,callBack);
    }
};

export default RNImmediatePhoneCall;
```
* 即可在RN中使用immediatePhoneCall，可实现拨打电话后5秒之后停止通话


